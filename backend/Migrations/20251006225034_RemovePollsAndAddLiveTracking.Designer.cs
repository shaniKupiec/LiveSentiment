// <auto-generated />
using System;
using System.Text.Json;
using System.Text.Json.Nodes;
using LiveSentiment.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LiveSentiment.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251006225034_RemovePollsAndAddLiveTracking")]
    partial class RemovePollsAndAddLiveTracking
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LiveSentiment.Models.Label", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("character varying(7)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("PresenterId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PresenterId");

                    b.ToTable("Labels");
                });

            modelBuilder.Entity("LiveSentiment.Models.Presentation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LabelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LiveEndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LiveStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PresenterId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("LabelId");

                    b.HasIndex("PresenterId");

                    b.ToTable("Presentations");
                });

            modelBuilder.Entity("LiveSentiment.Models.Presenter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.ToTable("Presenters");
                });

            modelBuilder.Entity("LiveSentiment.Models.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<JsonDocument>("Configuration")
                        .HasColumnType("jsonb");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("EnableEmotionAnalysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableKeywordExtraction")
                        .HasColumnType("boolean");

                    b.Property<bool>("EnableSentimentAnalysis")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsLive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LiveEndedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("LiveStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<Guid>("PresentationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PresentationId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("LiveSentiment.Models.Response", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<string>("SessionId")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("Responses");
                });

            modelBuilder.Entity("LiveSentiment.Models.SentimentAggregate", b =>
                {
                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("AggregatedSince")
                        .HasColumnType("timestamp with time zone");

                    b.Property<JsonDocument>("EmotionCounts")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonArray>("Keywords")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<JsonDocument>("SentimentCounts")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("QuestionId");

                    b.ToTable("SentimentAggregates");
                });

            modelBuilder.Entity("LiveSentiment.Models.Label", b =>
                {
                    b.HasOne("LiveSentiment.Models.Presenter", "Presenter")
                        .WithMany("Labels")
                        .HasForeignKey("PresenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Presenter");
                });

            modelBuilder.Entity("LiveSentiment.Models.Presentation", b =>
                {
                    b.HasOne("LiveSentiment.Models.Label", "Label")
                        .WithMany("Presentations")
                        .HasForeignKey("LabelId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("LiveSentiment.Models.Presenter", "Presenter")
                        .WithMany("Presentations")
                        .HasForeignKey("PresenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Label");

                    b.Navigation("Presenter");
                });

            modelBuilder.Entity("LiveSentiment.Models.Question", b =>
                {
                    b.HasOne("LiveSentiment.Models.Presentation", "Presentation")
                        .WithMany("Questions")
                        .HasForeignKey("PresentationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Presentation");
                });

            modelBuilder.Entity("LiveSentiment.Models.Response", b =>
                {
                    b.HasOne("LiveSentiment.Models.Question", "Question")
                        .WithMany("Responses")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LiveSentiment.Models.SentimentAggregate", b =>
                {
                    b.HasOne("LiveSentiment.Models.Question", "Question")
                        .WithOne()
                        .HasForeignKey("LiveSentiment.Models.SentimentAggregate", "QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("LiveSentiment.Models.Label", b =>
                {
                    b.Navigation("Presentations");
                });

            modelBuilder.Entity("LiveSentiment.Models.Presentation", b =>
                {
                    b.Navigation("Questions");
                });

            modelBuilder.Entity("LiveSentiment.Models.Presenter", b =>
                {
                    b.Navigation("Labels");

                    b.Navigation("Presentations");
                });

            modelBuilder.Entity("LiveSentiment.Models.Question", b =>
                {
                    b.Navigation("Responses");
                });
#pragma warning restore 612, 618
        }
    }
}
